name: Build Aseprite for Windows

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Choose release type: stable or beta'
        required: true
        default: beta

jobs:
  build:
    runs-on: windows-latest
    env:
      RELEASE_TYPE: ${{ github.event.inputs.release-type }}
    steps:
      # 1. Check out the Aseprite repository.
      - name: Checkout Aseprite source
        uses: actions/checkout@v3
        with:
          repository: 'aseprite/aseprite'
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2. Determine the branch or tag based on release type.
      - name: Set branch or tag for release
        id: set_release
        shell: bash
        run: |
          if [ "${{ env.RELEASE_TYPE }}" = "beta" ]; then
            # Replace "beta" with the actual beta branch or tag if different.
            echo "release_ref=beta" >> $GITHUB_OUTPUT
          else
            # Replace "master" with the appropriate stable branch or tag.
            echo "release_ref=master" >> $GITHUB_OUTPUT
          fi

      - name: Checkout selected release reference
        shell: bash
        run: |
          git fetch origin ${{ steps.set_release.outputs.release_ref }}
          git checkout ${{ steps.set_release.outputs.release_ref }}

      # 3. Set up the MSYS2 environment on Windows and install build dependencies.
      - name: Setup MSYS2 environment
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MINGW64
          install: >
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-libpng
            mingw-w64-x86_64-freetype
            mingw-w64-x86_64-glfw
            mingw-w64-x86_64-physfs
            mingw-w64-x86_64-boost
            zip

      # 4. Build Aseprite using CMake and Ninja.
      - name: Build Aseprite
        shell: bash
        run: |
          mkdir build
          cd build
          cmake -G Ninja .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
          ninja aseprite

      # 5. Archive the compiled Aseprite binary into a zip file.
      - name: Archive Aseprite binary
        shell: bash
        run: |
          cd build
          zip -r aseprite.zip aseprite

      # 6. Create a draft release on GitHub.
      - name: Create draft release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v$(date +'%Y%m%d%H%M')
          name: "Aseprite ${{ env.RELEASE_TYPE }} release"
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 7. Upload the zip file as a release asset.
      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          files: build/aseprite.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
